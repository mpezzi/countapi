<?php

/**
 * @file
 * Test file for Count API module.
 */

class CountAPITestCase extends DrupalWebTestCase {

  /**
   * User with rights to delete, reset and recalculate.
   */
  public $privileged_user;

  /**
   * Count object.
   */
  public $count;

  /**
   * Implements getInfo().
   */
  public function getInfo() {
    return array(
      'name' => t('Count API tests'),
      'description' => t('Run tests for Count API.'),
      'group' => t('Count API'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp('countapi');

    $this->user = $this->drupalCreateUser(array(
      'delete counts',
      'reset counts', 
      'recalculate counts'
    ));

    $this->drupalLogin($this->user);

    // Create count object for tests.
    $this->count = (object) array(
      'name' => 'test'
    );
  }

  /**
   * Ensure count saving.
   */
  function testCountCreation() {
    try {
      // Save to database.
      countapi_save($this->count);

      // Check that the count was saved to the database.
      $count = db_fetch_object(db_query("SELECT * FROM {countapi} WHERE name = 'test'"));
      $this->assertTrue($count, t('Count value should default to 0 when created.'));
    }
    catch ( Exception $e ) {
      $this->fail(t('Could not save count.'));
      return;
    }
  }

  /**
   * Ensure count loading.
   */
  function testCountLoad() {
    try {
      // Save to database.
      countapi_save($this->count);

      // Check that the count was loaded from the database.
      $count = countapi_load($this->count->cid);
      $this->assertEqual($count->name, $this->count->name, t('Count object was loaded correctly'));
    }
    catch ( Exception $e ) {
      $this->fail(t('Could not load count.'));
      return;
    }
  }

  /**
   * Ensure count setting.
   */
  function testCountSet() {
    try {
      // Save to database.
      countapi_save($this->count);

      // Set count and check we have one result.
      countapi_set('test', 'user', $this->user->uid, 1, FALSE);
      $count = db_result(db_query("SELECT COUNT(*) FROM {countapi_data} WHERE cid = %d AND type = '%s' AND type_id = %d", $this->count->cid, 'user', $this->user->uid));
      $this->assertEqual($count, 1, t('Count item was set in database.'));

      // Set another count and check we have two results.
      countapi_set('test', 'user', $this->user->uid, 1, FALSE);
      $count = db_result(db_query("SELECT COUNT(*) FROM {countapi_data} WHERE cid = %d AND type = '%s' AND type_id = %d", $this->count->cid, 'user', $this->user->uid));
      $this->assertEqual($count, 2, t('Count item number 2 was set in database.'));

      // Set another count and check unique functionality.
      countapi_set('test', 'user', $this->user->uid, 1, TRUE);
      $count = db_result(db_query("SELECT COUNT(*) FROM {countapi_data} WHERE cid = %d AND type = '%s' AND type_id = %d", $this->count->cid, 'user', $this->user->uid));
      $this->assertEqual($count, 2, t('Count item unique was not set in database.'));
    }
    catch ( Exception $e ) {
      $this->fail(t('Could not set count.'));
      return;
    }
  }

  /**
   * Implements tearDown().
   */
  public function tearDown() {
    db_query("DELETE FROM {countapi} WHERE name = 'test'");

    parent::tearDown();
  }

}
